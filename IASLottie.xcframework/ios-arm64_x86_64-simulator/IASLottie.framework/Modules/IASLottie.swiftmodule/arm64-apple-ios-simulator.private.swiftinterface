// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IASLottie
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import IASLottie
import Lottie
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public var IASLottieVersion: Swift.String {
  get
}
@_spi(Lottie) @objc @_inheritsConvenienceInitializers public class IASLottie : ObjectiveC.NSObject {
  @_spi(Lottie) public static let VersionSDK: Swift.String
  @_spi(Lottie) public static let BuildSDK: Swift.String
  @_spi(Lottie) @objc public class func getLottieViewWith(_ path: Swift.String, complete: @escaping IASLottie.AnimationLoadedHandler) -> UIKit.UIView
  @_spi(Lottie) @objc public class func getLottieView() -> UIKit.UIView
  @_spi(Lottie) @objc override dynamic public init()
  @_spi(Lottie) @objc deinit
}
@_spi(Lottie) public typealias AnimationLoadedHandler = (UIKit.UIView) -> Swift.Void
@_spi(Lottie) public typealias AnimationDataLoaded = (_ loop: Swift.Bool, _ startFrame: CoreFoundation.CGFloat, _ endFrame: CoreFoundation.CGFloat) -> Swift.Void
@_spi(Lottie) public typealias AnimationCompletedHandler = (_ completed: Swift.Bool) -> Swift.Void
@_spi(Lottie) @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class IASLottieView : UIKit.UIView {
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) public var isAnimationLoaded: Swift.Bool
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) public var isAnimationLoop: Swift.Bool
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) public var startFrame: CoreFoundation.CGFloat
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) public var endFrame: CoreFoundation.CGFloat
  @_spi(Lottie) @objc deinit
}
@_spi(Lottie) extension IASLottie.IASLottieView {
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public class func getLottieVersion() -> Swift.String
}
@_spi(Lottie) extension IASLottie.IASLottieView {
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func setAnimationData(_ data: Foundation.Data, complete: @escaping IASLottie.AnimationDataLoaded)
}
@_spi(Lottie) extension IASLottie.IASLottieView {
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func play()
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func play(from start: CoreFoundation.CGFloat, to end: CoreFoundation.CGFloat, loop: Swift.Bool, completion: IASLottie.AnimationCompletedHandler? = nil)
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func pause()
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func stop()
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func getCurrentFrame() -> CoreFoundation.CGFloat
  @_spi(Lottie) @objc @_Concurrency.MainActor(unsafe) dynamic public func setCurrentFrame(_ frame: CoreFoundation.CGFloat)
}
